[본체]
    - 메모리(RAM)  : 휘발성메모리 *주기억장치* 이면서 실행중인 상태에서만 메모리 저장
    - SSD/HDD(ROM): 비휘발성메모리 *보조기억장치* 이면서 비실행중인 상태에서 메모리 저장
    * 바둑게임 설치(15GB) 하면 보조기억장치에 저장 , 바둑게임 실행하면 필요한데이터를 주기억정치에 저장
    * 보조기억장치 용량이 크고 주기억장치는 속도 빠르다

[ 개발 주요 저장 ] * 저장하고자 하는 데이터의 ( 실무 )사용처 생각
    1) 크롬(브라우저F12) 로컬스토리리/세션저장소  :  클라이언트(유저) 환경에 저장 , 보안 취약 , 주로 설정정보
    2) CSV                                 : 영구저장 , 로컬PC 저장
    3) 데이터베이스                         :  영구저장 , 자바서버 외 DB서버 에 저장 ,
    4) 톰캣(SPRING서버) 세션                :  자바서버 저장 , 서버 과부하 , 보안 안전 , 주로 로그인상태
    5) 레디스                              :  임시저장(캐싱) , 주로 실시간 정보/DB조회 결과

[ Redis ]
    - 정의 : 인메모리 기반의 데이터 저장소
    - 목적 : 관계형 데이터베이스가 보조기억장치 이므로 빠른 메모리 처리를 사용할때
        MYSQL/ORACLE : SQL
        REDIS : NOSQL(객체지향- GET/SET)
    - 구조 : KEY-VALUE 이므로 MAP/JSON/DTO 구조와 비슷
    - 캐싱 : Select 할때마다 데이터베이스의 접근/요청하면 느리거나 성능 저하 되므로 한번 SELECT한 결과를 캐싱한다.
    - 설치
        방법1) 비설치형 : Spring 내장 Redis 인메모리
        방법2) 설치형 : Redis 자체 설치 , https://redis.io/ko/
        1. 윈도우/로컬 환경 : https://github.com/redis-windows/redis-windows/releases?utm_source=chatgpt.com
        2. 해당 버전 클릭 :
            선택1] Redis-8.2.2-Windows-x64-msys2-with-Service.zip     백그라운드 실행
            선택2] Redis-8.2.2-Windows-x64-msys2.zip                  직접 실행 ( **강의 기준** )
        3. 압축풀기 -> 압축 푼 폴더내 -> 'redis-server.exe'             관리자 권한 실행
            -> CMD창 켜지면서 가운데에 레디스 서버의 PORT 확인  : 서버가 켜진 상태
            -> CMD창 직접 닫기/종료 : 서버가 꺼진 상태
            * 서버가 꺼지면 저장된 모든 정보는 사라진다.
    - 레디스 PORT를 6379 사용한다.
    - 스프링과 레디스 연동 , https://start.spring.io/
        1. Spring Data Redis 의존성 추가 :  implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        2. application.properties 서버 연동
            spring.data.redis.host=localhost
            spring.data.redis.port=6379

    - 주 사용법
        1. (레디스에 저장할 데이터 타입형식의) 레디스템플릿 객체 생성한다.
            방법1] private final StringRedisTemplate redisTemplate;  : 문자열타입 , { key , value } , { 'student:1' , '유재석' }
            방법2] private final RedisTemplate redisTemplate;              : 그외 타입
            private final RedisTemplate<String,Object> redisTemplate;     : DTO/JSON 타입 호환

        *RedisTemplate 사용할 경우 레디스에 저장할 데이터 타입 설정 필요하다.    : { key , value } , { 'student:1' , { sno : 1 , sname : "유재석" } }
            @Configuration
            public class RedisConfig {
                @Bean // 빈 등록
                public RedisTemplate<String,Object> redisTemplate( RedisConnectionFactory  connectionFactory ){
                    RedisTemplate<String,Object> template = new RedisTemplate<>();
                    template.setConnectionFactory( connectionFactory );
                    template.setKeySerializer( new StringRedisSerializer() );
                    template.setValueSerializer( new GenericJackson2JsonRedisSerializer() );
                    return template; // 템플릿 반환
                }
            }

        2. 레디스에 데이터를 저장하는 방법
            1) redisTemplate.opsForValue().set( key , value );
            2) redisTemplate.opsForValue().set( key , value , TTL );
            * TTL(유효기간) : 지정한 기간/시간이 지나면 자동으로 삭제된다.
             Duration.ofXXXX( 수 ) ,
                 Duration.ofSeconds( 10 ) : 10초간 유효기간
                 Duration.ofMinutes( 10 ) : 10분간 유효기간
            * key는 절대 중복이 불가능하므로 동일한 key 넣을때는 덮여쓰기 된다. < 수정 활용 >

        3. 레디스에 데이터를 호출하는 방법
            1) Object value = redisTemplate.ops.ForValue().get( key )       :  특정 key의 value 반환
            2) Set<String> keys = redisTemplate.keys("*")                   : 모든 key 반환
            3) Set<String> keys = redisTemplate.keys("패턴")                 : 특정 패턴의 key 반환
            * 레디스는 key의 이름은 주로 , "의미상의단어:식별번호"
                1) student:1 , student:2 , student:3            , student:*
                2) phone:010-3333-3333 , phone:010-4444-4444    , phone:*
                3) jwt:토큰번호 , jwt:토큰번호 , jwt:토큰번호       , jwt:*

        4. 레디스에 데이터 삭제하는 방법
            1) boolean result = redisTemplate.delete( key )         : 특정한 key 의 key-value(엔트리) 삭제

        5. 레디스 key 존재 여부 확인 방법
            1) boolean result = redisTemplate.hasKey( key )         : 특정한 key가 존재하면 true 아니면 false 반환