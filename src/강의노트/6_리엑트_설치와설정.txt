[ react / 리액트 ]
    1. 정의 : 페이스북(메타) 회사에서 개발한 자바스크립트 라이브러리(함수 집합)

    2. 목적 : 
        1. 자바스크립트에서 부족한 UI 조작과 효율성 보안 
        2. 웹/앱 유연한 UI 제공
        3. 트렌디한 변화 빠르게 대응

    3. 특징 
        1. 화면(HTML) 을 컴포넌트(함수) 기반 , 재사용 가능
        2. 가상 DOM : 가상(가짜) HTML 사용하여 성능 최적화 , HTML의 존재하지 않는 마크업 만들기.
        3. **훅( Hooks )** 지원 : 함수형 프로그래밍 방식으로 다양한 기능 지원

    4. 사용처 
        1. 웹개발 : React 
        2. 앱개발 : React Native 
        3. 웹/앱 개발 : React Native web 
        현재 트렌드 : spring + react.js + next.js

    5. SPA vs MPA
        - SPA ( Single page Application )
            1. HTML 한장으로 구성 , CSR( Client side Rendering )방식 
            2. 클라이언트사이드렌더링이란? 사용자 브라우저에서 화면 전환 
            3. 장점 : 빠르다,서버부담적다 / 단점:최초로딩느리다, 검색엔진( SEO )불리다.
            예시] REACT( web2 ) , 
            단점보완 : 서버사이드렌더링을 고집하게 위해 NEXT.JS 도입 한다.
        - MPA ( Multi page Application )
            1. HTML 여러장으로 구성 , SSR( Server side Rndering )방식 
            2. 서버사이드렌더링이란 ? 서버가 제공하여 사용자브라우저에서 화면 전환
            3. 장점 : SEO 장점, 초기로딩빠름:필요한 데이터만 사용 / 단점 : 새로고침(깜빡거림), 서버부담크다.
            예시] JSP( web1 )
    
[ react / 리액트 환경 설치 ]
    - NODE.JS 이란? 크롬(브라우저) 엔진을 사용하여 HTML에 종속되지 않고 자체적인 자바스크립트를 실행하는 라이브러리 
    - NPM 이란? node package manager : NODE.JS 기반의 라이브러리(패키지)를 설치/관리 해주는 프로그램 VS (자바)그레이들
    1. node.js 설치
        1. https://nodejs.org/ko/ , node.js 공식홈페이지 
        2. https://nodejs.org/ko/download , 설치페이지
        3. 하단에 [ Windows 설치 프로그램 (.msi) ] 클릭하여 설치하기
            현재 강의 기준 : v22.19.00 LTS. Node.js
        4. 'node-v22.19.0-x64.msi' 실행
        5. [next] -> (I accpt)체크 [next] -> (기본폴더) [next] -> [next] -> [next] -> [install]
    
    2. node.js 버전 확인 
        1. 윈도우 -> cmd(명령프롬프트) 
        2. 아래와 같이 입력후 엔터해서 출력 결과 확인한다.
            node -v 입력후 엔터 : 출력 예] v22.19.0     *버전 20이상이면 상관없음
            npm -v 입력후 엔터 :  출력 예] 10.9.3       *버전 8이상이면 상관없음
            npm -v 입력후 엔터 :  출력 예] 10.9.3       *버전 8이상이면 상관없음

    3. react 설치 
        1. 설치할 폴더(생성/선정) 이동 , 강의기준 : 강의web2프로젝트 -> src -> main 폴더
            src -> main 폴더 오른쪽클릭 -> [ 통합 터미널 열기 ] 클릭 
        2. npm create vite@latest reactapp --template react
            - 'npm create vite@latest 프로젝트명 --template react'
            - 첫 설치 문제점: node.js를 처음설치한 pc에서 오류가 발생
                1. node -v 에서 오류 발생시 : vscode를 종료후 재실행 
                2. npm -v 에서 오류 발생시 : 터미널 강력 권한 변경 : 
                    'Get-ExecutionPolicy' 입력후 엔터 --> 'Restricted' 출력됨
                    'Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned' 입력후 엔터
                    'Get-ExecutionPolicy' 입력후 엔터 --> 'RemoteSigned' 출력됨
        3. 설치여부 
        Need to install the following packages:
        create-vite@7.1.1
        Ok to proceed? (y)              <-------- y 입력후 엔터

        4. 키보드 방향키를 이동하여 'React' 에서 엔터 
        ◆  Select a framework:
        │  ○ Vanilla
        │  ○ Vue
        │  ● React
        │  ○ Preact
        │  ○ Lit
        │  ○ Svelte
        │  ○ Solid
        │  ○ Qwik
        │  ○ Angular
        │  ○ Marko
        │  ○ Others

        5. 키보드 방향키를 이동하여 'JavaScript + SWC' 에서 엔터 
        ◆  Select a variant:
        │  ○ TypeScript
        │  ○ TypeScript + SWC
        │  ○ JavaScript
        │  ● JavaScript + SWC
        │  ○ React Router v7 ↗
        │  ○ TanStack Router ↗
        │  ○ RedwoodSDK ↗
        │  ○ RSC ↗

        6. 최초 리액트 실행시 아래와 같이 입력후 엔터
            1. 'cd reactapp'     : cd 폴더명
            2. 'npm install'     : 현재 폴더내 라이브러리 전체 설치 
            3. 'npm run dev'     : 현재 폴더의 리액트 실행
                ---> http://localhost:5173/


        7. 리액트 종료
            방법1) vscode 종료
            방법2) 터미널 종료
            방법3) 터미널에 'ctrl+c' 입력후 종료

        ** 이미 설치된 리액트 재 실행 
            1. src-> main -> reactapp (리액트 최상위 폴더) 를 오른쪽클릭 ->  -> [ 통합 터미널 열기 ] 클릭 
            2. npm run dev 
            ** 리액트 코드 변경시 현재 서버가 실행중이라면 자동 리빌딩 된다.

    4. react 프로젝트(패키지) 구조
        -> node_modules : 현재 프로젝트 설치된 라이브러리( 주로 GIT 저장소 COMMIT 하지 않는다. )
            * 만약에 해당 폴더가 없을경우에 터미널에서 'npm install' 하면 자동으로 생성된다.
        -> public       : 주로 정적파일 ( 로고 , 파비콘 등 )
        -> src          : 주로 코드파일 
            -> App.css  : 컴포넌트 css 파일 , 삭제 가능
            -> App.jsx  : 최상의 컴포넌트 파일 , 삭제 가능
            -> *** main.jsx *** : 최상위 컴포넌트를 렌더링하는 파일 
            -> main.css  : 최상위 css 파일 
            추후에 역할에 따라 패키지 구성할 예정 
            -> components폴더
            -> pages폴더
            -> api폴더
        -> *** index.html *** : react(spa:싱글페이지=HTML1개)의 최상위 HTML 파일
        -> *** package.json *** : 현재 프로젝트의 설정과 라이브러리 의존성 들어있는 파일 